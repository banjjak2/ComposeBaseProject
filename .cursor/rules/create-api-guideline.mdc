---
description: 
globs: 
alwaysApply: true
---
## API 정의 및 사용을 위한 가이드라인

### 공통 요구사항
- 명세에 작성된 그대로 구현해 주세요.
  - 스스로 판단해서 추가하거나 제거하는 등의 행위 금지
- 내가 요청한 부분만 처리해 주세요. 필요하다고 판단해서 추가하는 행위는 하지 마세요.
- 아래 작성된 요구사항들을 순서대로 따라주세요.

### 1. Request 모델 요구사항
- `app/src/main/java/com/sample/composebaseproject/data/api/model/request` 위치에 저장해 주세요.

### 2. Response 모델 요구사항
- `app/src/main/java/com/sample/composebaseproject/data/api/model/response` 위치에 저장해 주세요.

### 3. Request & Response 모델 작성 요구사항
- response, request 모델이 필요없다면 구현하지 마세요. 기본적인 구조는 아래 예시를 참고해 주세요.
```kotlin
@Serializable
data class XXXResponse(...)
```
- 명세에 정의된 필드들의 format 형식을 꼭 지켜주세요.
  - 예시: format이 date라면 LocalDate, int32라면 Int 등
  - 어떤 format으로 정의 해야할지 모호한 경우라면 TODO로 남겨주세요.
- 필드의 이름이 `snake_case`인 경우에만 SerialName Annotation을 붙여주세요.
- 필드가 `enum` 타입이라면 재사용할 수 있는 `enum` 클래스가 있는지 확인하고 없을 경우에만 `app/src/main/java/com/sample/composebaseproject/data/api/model`에 아래 예시를 따라 정의해 주세요. enum 클래스에 정의될 entry들은 모두 대문자로 작성해 주세요.
```kotlin
@Serializable
data class XXXResponse(...) {
  enum class Abc {
    @SerialName("abc")
    AAA
  }
}
```
- 각 필드의 타입이 `LocalDate`, `LocalDateTime` 등 `kotlinx-serialization`에서 직렬화와 역직렬화를 지원하지 않는 타입인 경우에는 `KSerializer`를 상속받아 커스텀 Serializer를 `app/src/main/java/com/sample/composebaseproject/data/api/model/serializer`에 아래의 예시를 따라 구현해 주세요.
```kotlin
// 커스텀 Serializer
class LocalDateSerializer : KSerializer<LocalDate> {
    private val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")

    override val descriptor: SerialDescriptor = PrimitiveSerialDescriptor("LocalDate", PrimitiveKind.STRING)

    override fun deserialize(decoder: Decoder): LocalDate {
        val string = decoder.decodeString()
        return LocalDate.parse(string)
    }

    override fun serialize(encoder: Encoder, value: LocalDate) {
        val string = value.format(formatter)
        encoder.encodeString(string)
    }
}
// Response 또는 Request 모델
@Serializable
data class XXXResponse(
  @Serializable("LocalDateSerializer::class")
  val birthdate: LocalDate
)
```

### 4. API 작성 요구사항
- OkHttp와 Retrofit을 사용하고 있습니다.
- [SampleApi.kt](mdc:app/src/main/java/com/sample/composebaseproject/data/api/SampleApi.kt)에 요청한 API들을 모두 작성해 주세요.
  - 추가적인 Api 클래스는 필요하지 않습니다.
- API는 아래와 같은 구조를 따라주세요.
  - 반환할 데이터가 없다면 반환값은 설정하지 마세요.
```kotlin
// API 작성 예시
interface ABCApi {
  @GET("/api/path")
  suspend fun AAA(): BBBResponse
}
```

### 5. Repository 작성 요구사항
- [SampleRepository.kt](mdc:app/src/main/java/com/sample/composebaseproject/data/api/repository/SampleRepository.kt)에 API를 호출할 메소드만 정의해 주세요.
  - [DefaultSampleRepository.kt](mdc:app/src/main/java/com/sample/composebaseproject/data/api/repository/DefaultSampleRepository.kt)에는 [SampleRepository.kt](mdc:app/src/main/java/com/sample/composebaseproject/data/api/repository/SampleRepository.kt)에서 정의한 메소드를 구현해 주세요.
- Flow를 이용해 값을 반환해 주세요.
  - 반환할 값이 없다면 `Flow<Unit>`으로 반환하도록 해주세요.


